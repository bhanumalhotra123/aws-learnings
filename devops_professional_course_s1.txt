CICD Intro

We will learn about:

AWS Code Commit
AWS Code Pipeline
AWS Code Build
AWS Code Deploy
AWS Code Star
AWS Code Artifact
AWS Code Guru


Continous Integration:
Developers push the code to a code repository often ( eg- Github, CodeCommit, Bitbucket)

A testing/ build server checks the code as soon as it is published ( CodeBuild, Jenkins CI etc)

The developer gets feedback about the tests and checks that have passed/failed.

  Find bugs early, then fix bugs

Deliver faster as the code is tested

Deploy often

Happier developers, as they're unblocked.


Continous Delivery:

Ensures that the software can be released reliably whenever needded.
Ensures deployments happen often and are quick.
Shift away from "one release every 3 months" to "5 releases a day"
That usually means automated deployment(CodeDeploy[EC2 Instances, On-premises Instances, AWS Lambda, Amazon ECS], JenkinsCD etc) 


Code[CodeCommit]   Build&Test[AWS CodeBuild]  Deploy[AWS CodeDeploy OR AWS Elastic Beanstalk]


Orchestrate using AWS Code Pipeline


AWS CodeCommit

Version Control is the ability to understand the various changes that happenedd to the code over time (and possibly roll back)
All these are enabled by using a version control system such as Git
A git repository can be synchronized on your computer, but it usually is uploaded on a central online repository.

Benefits are:
Collabrate with other developers
Make sure the code is backed-up somewhere
Make sure it is fully viewable and auditable.


Why codecommit?

Git repositories can be expensive

Using AWS CodeCommit:
  Private Git repositories (Code lives and stays within your VPC)
  No size limit on repositories
  Fully Managed and highly available
  Code Only in AWS Cloud account [Increased Security and compliance.
  Security(encrypted, access control)
     Interactions are done using Git (standard)
     Authentication
        SSH Keys AWS Users can configure SSH keys in their IAM Console
        HTTPS with AWS CLI Credential helper or Git Credentials for IAM user
     Authorization
        IAM policies to manage users/roles to repositories
     Encryption
         Repositories are automatically encrypted at rest using AWS KMS
         Encrypted in transit (can only use HTTPS or SSH - both secure)
     Cross-account Access
         Do not share your SSH keys or your AWS credentials
         Use an IAM Role in your AWS account and use AWS STS (AssumeRole API)


Go to console > Search for codecommit> Create Repositories 


    We are greeted with connections steps:
Optionns are: HTTPS, SSH, HTTPS(GRC)
If you are using root you won't see SSH

you can add your files


In settings section > Notification > Create notification rule > Select events that happens on codecommit repo> Target ( select SNS topic or create it ) 


In notification section only create trigger

events 
service you want to trigger > SNS or Lambda



How to do this programmaticaly? Uploading code to codecommit without using the options 'create file' and 'upload file' options on console'

Go to IAM

Users > Security Credentials > Here you have the option of SSH keys for AWS CodeCommit, HTTPS Git credentials for AWS Code Commit [earlier you have used this section for access keys]

In SSH keys section you can upload your keys

Now going back to your repo

clone URL> Clone SSH
copy the URL you get

If in case you don't know how to work with SSH you can use HTTPS option > Generate

now clone URL > clone HTTPS


Install git
git clone https
give username and passsword

add the files you want to 

git add .
git commit -m""
git push 

Now go and check codecommit, you can see new files there.


You can monitor any kind of events in CodeCommit using EventBridge(near realtime)
ex - pullRequestCreated, pullRequestStatusChanged etc


CodeCommit --> EventBridge --> SNS,Lambda,CodePipeline



How to migrate Git Repository to CodeCommit?

You can migrate a project hosted on another Git repository (example - Github, GitLab) to CodeCommit repo.
1. Create CodeCommit Repo
2. Do git clone from git server to bring everything on local
3. Push it to the URL where you want to (CodeCommit)



CodeCommit [Cross-Region Replication]

Use Case: Achieve lower latency pulls for global developers, backups
Say from us-east-1 to eu-west-2

Developer ---> CodeCommit(Repository_A) --event-> EventBridge --Invoke--> ECS Task (do git clone from current region)--> git remote set-url --push origin https://git-codecommit.eu-west-2.amazonaws.com/v1/repos/Repository_B  



What about branch protection?

By default, a user who has push permissions to a CodeCommit repository can contribute to any branch.

Use IAM policies to restrict users to push or merge code to a specific branch

Example: Only senior developers can push to production branch

Attach IAM Policy which have deny effect to actions such as GitPush, DeleteBranch, PutFile, MergeBranchesByFastForward etc.. on resource 'repo' with conditions as codecommit:References: {refs/heads/main, refs/head/prod}


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Deny",
            "Action": [
                "codecommit:GitPush",
                "codecommit:DeleteBranch",
                "codecommit:PutFile",
                "codecommit:MergeBranchesByFastForward"
            ],
            "Resource": "arn:aws:codecommit:REGION:ACCOUNT-ID:REPO-NAME",
            "Condition": {
                "StringEqualsIfExists": {
                    "codecommit:References": [
                        "refs/heads/main",
                        "refs/heads/prod"
                    ]
                }
            }
        }
    ]
}




CodeCommit Pull Request Approval Rules

Helps ensure the quality of your code by requiring users to approve the open PRs before the codecan be merged.

Specify a pool of users to approve and number of users who must approve the PR.
Specify IAM Principal ARN (IAM usrs, federated users, IAM Roles, IAM Groups)

Approval Rule Templates:
Automatically apply Approval Rules to PRs in specific repositories
Example: define different rules for dev and prod branches.












  


